import hashModel from "../models/hash.model.js";
import tguserModel from "../models/tguser.model.js";
import wauserModel from "../models/wauser.model.js";
import appendToSheet from "../utils/appendToSheet.js";
import notificationSender from "../utils/notificationSender.js";
import sendLogToChat from "../utils/sendLogToChat.js";
import dotenv from "dotenv";
const format = (await import('date-format')).default;

dotenv.config();

export const saveHash = async (req, res) => {
  try {
    const { advertisment, geo, sessionId, sheet, tableId } = req.query;

    // —Ç—É—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥, —á—Ç–æ –±—ã —Å–µ—Å—Å–∏–∏ –Ω–µ —Ç–µ—Ä—è–ª–∏—Å—å
    await new hashModel({
      sessionId,
      addSet: advertisment,
      geo,
      sheet,
      tableId,
    }).save();

    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002534133157",
      "/save-hash –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö–µ—à —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∫–ª–∏—Ü–µ –Ω–∞ –í–¶",
      {
        advertisment,
        geo,
        sessionId,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );
    res.status(200).send("ok");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ:", err);
    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002688284609",
      "/save-hash –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ö–µ—à —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –∫–ª–∏—Ü–µ –Ω–∞ –í–¶",
      {
        err,
        message: err.message,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );
    res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
  }
};

export const compareData = async (req, res) => {
  try {
    console.log(req.query);
    const { phone, sessionId, name } = req.query;

    // —Ç—É—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ç–∏–ø –≤ –±–¥;
    // const wauser = await wauserModel.findOne({ phone });
    // if (wauser) {
    //   sendLogToChat(
    //     process.env.BOT_LOG_TOKEN,
    //     "-1002534133157",
    //     `/compare-data WhatsApp –î—É–±–ª—å. –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É`,
    //     {
    //       phone,
    //       sessionId,
    //       name,
    //       time: format("dd-MM-yyyy, hh:mm"),
    //     }
    //   );
    //   return res.status(200).send("ok");
    // }

    const record = [];

    // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ö–µ—à
    const hash = await hashModel.findOne({ sessionId });

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ –¥—É–±–ª—å –∏ –µ—Å—Ç—å —Ö—ç—à
    // await new waUserModel({
    //   phone,
    //   name,
    //   geo: hash ? hash.geo : "",
    //   sheet: hash.sheet,
    //   tableId: hash.tableId,
    // }).save();

    if (!hash) {
      sendLogToChat(
        process.env.BOT_LOG_TOKEN,
        "-1002534133157",
        `/compare-data –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ utm - –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω`,
        {
          phone,
          sessionId,
          name,
          hash,
          time: format("dd-MM-yyyy, hh:mm"),
        }
      );

      record.push(
        "WhatsApp",
        name ? name : "-",
        phone,
        "-",
        "-",
        format("dd-MM-yyyy, hh:mm")
      );
      await appendToSheet(record);
      return res.status(200).send("ok");
    }

    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002534133157",
      `/compare-data –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–∏—Å–∞–Ω`,
      {
        phone,
        sessionId,
        name,
        hash,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );

    record.push(
      "WhatsApp",
      name ? name : "-",
      phone,
      hash.addSet === undefined || hash.addSet === null ? "-" : hash.addSet,
      hash.geo === undefined || hash.geo === null ? "-" : hash.geo,
      format("dd-MM-yyyy, hh:mm")
    );

    // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
    notificationSender(
      process.env.BOT_LOG_TOKEN,
      hash.addSet,
      "WhatsApp: —É–ø–∞–ª –ª–∏–¥, —Å–º–æ—Ç—Ä–∏ –≤ –ª–∏—Å—Ç–µ Leads"
    );
    await appendToSheet(record, hash.sheet, hash.tableId);
    res.status(200).send("ok");
  } catch (err) {
    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002688284609",
      "/compare-data —Å—Ä–∞–≤–Ω–∏–Ω–µ–∏–µ –∏ –∑–∞–ø–∏—Å—å —Ö–µ—à–∞, –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç –≤ –í–¶",
      {
        err,
        message: err.message,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ:", err);
    res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
  }
};

export const record = async (req, res) => {
  try {
    const { username, fullname, userId, payload, sheet, tableId } = req.query;
    console.log("üîπ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω:", JSON.stringify(req.query));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ –±–¥
    // const tguser = await tguserModel.findOne({ userId });
    // if (tguser) {
    //   sendLogToChat(
    //     process.env.BOT_LOG_TOKEN,
    //     "-1002534133157",
    //     "/record Telegram –î—É–±–ª—å. –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É",
    //     {
    //       username,
    //       fullname,
    //       userId,
    //       payload,
    //       sheet,
    //       time: format("dd-MM-yyyy, hh:mm"),
    //     }
    //   );
    //   return res.status(200).send("–ù–µ –∑–∞–ø–∏—Å–∞–Ω –≤ —Ç–∞–±–ª–∏—Ü—É");
    // }

    // –µ—Å–ª–∏ –Ω–µ—Ç –≤ –±–¥, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –∫–∞–∫ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
    const [advertisment, geo] = payload.split("-");
    const recordData = [];

    // await tgUserModel({
    //   username,
    //   userId,
    //   geo,
    // }).save();

    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002534133157",
      "/record –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Å —Ç–≥ –±–æ—Ç–∞",
      {
        username,
        fullname,
        userId,
        payload,
        sheet,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );

    // –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
    notificatonSender(
      process.env.BOT_LOG_TOKEN,
      advertisment,
      "Telegram: —É–ø–∞–ª –ª–∏–¥, —Å–º–æ—Ç—Ä–∏ –≤ –ª–∏—Å—Ç–µ aff"
    );
    recordData.push(
      username,
      fullname,
      userId,
      advertisment,
      geo,
      format("dd-MM-yyyy, hh:mm")
    );

    appendToSheet(recordData, sheet, tableId);
    res.status(200).send("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É");
  } catch (err) {
    sendLogToChat(
      process.env.BOT_LOG_TOKEN,
      "-1002688284609",
      "/record –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É —Å —Ç–≥ –±–æ—Ç–∞",
      {
        err,
        message: err.message,
        time: format("dd-MM-yyyy, hh:mm"),
      }
    );
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ:", err);
    res.status(500).send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏");
  }
};
